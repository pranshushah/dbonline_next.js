/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as swapi from "./../types/backing"
import type { ContextType } from "./../types/backing"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  addDatabase: { // input type
    createdAt: string; // String!
    databaseName: string; // String!
    databaseType: NexusGenEnums['DatabaseType']; // DatabaseType!
    id: string; // String!
    mainTableDetails: string; // String!
    modifiedAt: string; // String!
    tableDndDetails: string; // String!
    tables: Array<string | null>; // [String]!
  }
}

export interface NexusGenEnums {
  DatabaseType: "mysql" | "oracle" | "postgresql"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Database: swapi.Database;
  Mutation: {};
  Query: {};
  User: swapi.User;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Database: { // field return type
    author: NexusGenRootTypes['User']; // User!
    authorId: string; // String!
    createdAt: string; // String!
    databaseName: string; // String!
    databaseType: NexusGenEnums['DatabaseType']; // DatabaseType!
    id: string; // ID!
    mainTableDetails: string; // String!
    modifiedAt: string; // String!
    numberOfForks: number; // Int!
    originalAuthor: NexusGenRootTypes['User'] | null; // User
    originalAuthorId: string | null; // String
    tableDndDetails: string; // String!
    views: number; // Int!
  }
  Mutation: { // field return type
    CreateDatabase: NexusGenRootTypes['Database'] | null; // Database
    CreateDatabases: boolean | null; // Boolean
  }
  Query: { // field return type
    greeting: string; // String!
  }
  User: { // field return type
    allDatabaseInfo: NexusGenRootTypes['Database'][]; // [Database!]!
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    photo: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Database: { // field return type name
    author: 'User'
    authorId: 'String'
    createdAt: 'String'
    databaseName: 'String'
    databaseType: 'DatabaseType'
    id: 'ID'
    mainTableDetails: 'String'
    modifiedAt: 'String'
    numberOfForks: 'Int'
    originalAuthor: 'User'
    originalAuthorId: 'String'
    tableDndDetails: 'String'
    views: 'Int'
  }
  Mutation: { // field return type name
    CreateDatabase: 'Database'
    CreateDatabases: 'Boolean'
  }
  Query: { // field return type name
    greeting: 'String'
  }
  User: { // field return type name
    allDatabaseInfo: 'Database'
    email: 'String'
    id: 'ID'
    name: 'String'
    photo: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    CreateDatabase: { // args
      data: NexusGenInputs['addDatabase']; // addDatabase!
    }
    CreateDatabases: { // args
      data: Array<NexusGenInputs['addDatabase'] | null>; // [addDatabase]!
    }
  }
  Query: {
    greeting: { // args
      name: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ContextType;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}